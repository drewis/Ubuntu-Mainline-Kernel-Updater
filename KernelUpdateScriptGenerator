#!/usr/bin/php
<?php
// This is a client side php script, as such it needs the php5-cli package to work
// This script generates a bash script
$NO_RC=false;
$version=false;
$r=false;
$k=false;
error_reporting(0);
foreach($argv as $key => $val){
	if($val=='-no-rc')
		$NO_RC=true;
	else if($val=='-v'){
		if(!isset($argv[$key+1]))
			break;
		if(strlen($argv[$key+1])==0)
			continue;
		$version=$argv[$key+1];
		if(!is_numeric(substr($version,0,1)))
			die("$version is not a version number\n");
	}
	else if($val=='-r'){
		if(!isset($argv[$key+1]))
			break;
		if(strlen($argv[$key+1])==0)
			continue;
		$r=$argv[$key+1];
	}
	else if($val=='-k'){
		$k='1.0.0-1-generic';// Very low fake kernel version to ensure new kernel is found
	}
	else if ($val=='--debug'){
		error_reporting(E_ALL & ~E_DEPRECATED & ~E_STRICT);
	}
	else if($val=='-h'||$val=='--help'){
		$script=strrpos($_SERVER["SCRIPT_NAME"],'/');
		if(!is_bool($script))
			$script=substr($_SERVER["SCRIPT_NAME"],$script+1);
		else
			$script=$_SERVER["SCRIPT_NAME"];
		echo "Options:\n\t-no-rc sets the script to ignore Release Canidate versions\n";
		echo "\t-k tells the script to generate a installer regardless of the current running kernel\n";
		echo "\t-r overrides the release version\n\t\teg: `".$script." -r raring` \n\t\tWould mean to a only kernels for raring even if you are using quantal\n";
		echo "\t-v is used to specify version series\n\t\teg: `".$script." -v 3.8` \n\t\tWould mean to a only accept kernels starting with 3.8 in the version number";
		die("\n");
	}
}
if(is_bool($r))
	$r=substr(shell_exec('lsb_release -sc'),0,-1);
if(is_bool($k))
	$k=substr(shell_exec("uname -r"),0,-1);
echo "#!/bin/bash\n\n";
echo "echo 'Config Notes:'\n";
echo "echo -e '\\t".(!$NO_RC?"Accept":"Reject")."ing Release Canidates'\n";
echo "echo -e '\\tAccepting Latest".(is_bool($version)?'':' '.$version)." Kernel'\n";
echo "echo -e '\\tAccepting kernels compiled for $r'\n";
echo "echo -e '\\tAccepting kernels with a version higher than $k'\n";
$url="http://kernel.ubuntu.com/~kernel-ppa/mainline/";
$html=file_get_contents($url);
for($i=1;$i<21;$i=$i+1){
	$html=file_get_contents($url);
	if(strlen($html)==0)
		shell_exec("notify-send --icon error 'Kernel Update Checker' 'Unable to connect to kernel.ubuntu.com\\nAttempt $i/20'");
	else
		break;
	shell_exec("sleep 11");
}
if(strlen($html)==0)
	die("echo 'No Internet Access'\nexit\n");
$DOM=new DOMDocument;
$DOM->loadHTML($html);
$links=$DOM->getElementsByTagName('a');
$arr=array();
$arr2=array();
$k=explode('-',$k);
$dir='';
for ($i = 0; $i < $links->length; $i++){
	$name=substr($links->item($i)->nodeValue,1,-1);
	if(strpos($name,$r)>0){
		if(($NO_RC && strpos($name,'-rc')>0)||(!is_bool($version) && substr($name,0,strlen($version))!=$version))
			continue;
		$name2=substr($name,0,strpos($name,"-$r"));
		if(version_compare($name,$k[0])==1){
			$k[0]=$name2;
			array_push($arr,$name2);
			array_push($arr2,'v'.$name.'/');
		}
	}
}
if(count($arr)>0){
	$k=$arr[count($arr)-1];
	shell_exec("notify-send --icon info 'Update Available' 'Kernel $k is available.'");
	$url=substr($url.$arr2[count($arr2)-1],0,-1);
	$html=file_get_contents($url);
	$DOM=new DOMDocument;
	$DOM->loadHTML($html);
	$links=$DOM->getElementsByTagName('a');
	for ($i = 0; $i < $links->length; $i++){
		$name=$links->item($i)->nodeValue;
		if(strpos($name,'.deb')>0)
			break;
	}
	$name=substr($name,strpos($name,'_')+1,-1*strlen(substr($name,strrpos($name,'_'))));
	$a=substr($name,0,strrpos($name,'.'));
	$b=substr($name,strrpos($name,'.')+1);
}
else
	die("exit\n");
echo "\nWHERE=\"$url\"\n";
echo "VER_A=\"$a\"\n";
echo "VER_B=\"$b\"\n";
echo "VER_C=\"".str_replace('-generic','',substr(shell_exec("uname -r"),0,-1))."\"\n\n";
?>
echo -e '\nInformation:'
echo -e "\tOrigin: \n\t\t$WHERE\n\tKernel Version:\n\t\t$VER_A"
echo -e "\tRelease Date:\n\t\t${VER_B:0:4}/${VER_B:4:2}/${VER_B:6:2} @ ${VER_B:8:2}:${VER_B:10:2} (YYYY/MM/DD @ HH:MM)\n"

if [ "$1" == "--uninstall" ];then
	if [ "$VER_A" == "$VER_C" ];then
		echo -e "WARNING:\n\tYou are about to un-install the current running kernel,\n\tif you don't have a replacement kernel installed,\n\tyou will not be able to boot."
	fi
	if [ $(dpkg-query -l "linux-image-extra-$VER_A-generic" > /dev/null 2>&1;echo $?) -eq 0 ];then
		sudo apt-get purge linux-{image-extra,headers,image}-$VER_A-generic linux-headers-$VER_A
	else
		sudo apt-get purge linux-{headers,image}-$VER_A-generic linux-headers-$VER_A
	fi
	exit
elif [ "$1" == "--silent" ];then
	auto=1
else
	auto=0
fi
if [ "$1" == "--download-only" ];then
	download=1
else
	download=0
fi
if [ -n "$2" ];then
	if [ "$2" == "--download-only" ];then
		download=1
	elif [ "$2" == "--silent" ];then
		auto=1
	fi
fi

LOC="/tmp/kernel-$VER_A"
if [ -d "$LOC" ];then
	clear
	echo -e "Warning: This script has been run already\nFiles are in $LOC\nDelete existing downloads? (y=Yes, n=No) (y)"
	if [ $auto -eq 0 ];then
		read action
	else
		action="n"
	fi
	if [ ! "$action" == "n" ];then
		rm $LOC/* > /dev/null
	fi
else
	mkdir $LOC
fi
cd $LOC
arch=$(dpkg --print-architecture)
echo "Care to look at the change log? (y=Yes, n=No) (n)"
if [ $auto -eq 0 ];then
	read action
else
	action="n"
fi
if [ "$action" == "y" ];then
	curl $WHERE/CHANGES 2> /dev/null | less
	echo "Now that you read the change log, do you want to upgrade (y=Yes, n=No) (y)"
	read action
	if [ "$action" == "n" ];then
		exit
	fi
fi
wget -nc $WHERE/linux-headers-$VER_A"_$VER_A"."$VER_B"_all.deb
wget -nc $WHERE/linux-{image-extra,headers,image}-$VER_A-generic_$VER_A."$VER_B"_$arch.deb
clear
total=$(ls linux-*.deb | wc -l)
if [[ $total -eq 3 && ( $VER_B -gt 201304080035 || $VER_B -lt 201206041411 ) ]];then
	# Don't feel like inverting the above line and merging it with the line that is on this line plus two, so enjoy my sense of humor
	echo -e "Greetings $USER\n  I ($(hostname)) am now self aware and a sentient being, have a nice day.\n  Oh and by the way SKYNET is now active.\n"
elif [ $total -ne 4 ];then
	echo -e "Failed to download all needed files\nFiles are in $LOC\nGet files from $WHERE\n\nThere should be 4 files, 3 ending with '$arch.deb' and 1 with 'all.deb'\nHere is what we have:"
	ls $LOC
	echo -e "\nYou can install what you have by running this command:\n\tsudo dpkg -i $LOC/linux-*.deb\nJust be prepared for broken packages."
	exit 1
fi
if [ $download -eq 1 ];then
	echo -e "Packages have been downloaded to $LOC\nHere is a list:"
	ls $LOC
	exit 0
fi
echo "Installing Linux $VER_A:"
sudo dpkg -i ./linux-*.deb
if [ -d /lib/modules/$VER_A-generic ];then
	echo -e "\nThe New Kernel looks to have been installed"
	if [ $auto -eq 0 ] && [ "$VER_A" != "$VER_C" ];then
		echo -e "\nWARNING: If the new kernel does not boot you may regret saying yes here.\nWould you like to remove the current one? (y=Yes, n=No) (n)"
		read action
	else
		action="n"
	fi
	if [ "$action" == "y" ];then
		sudo apt-get purge linux-{image-extra,headers,image}-$VER_C-generic linux-headers-$VER_C
		if [ $(dpkg-query -l "linux-image-extra-$VER_C-generic" > /dev/null 2>&1;echo $?) -eq 0 ];then
			sudo apt-get purge linux-{image-extra,headers,image}-$VER_A-generic linux-headers-$VER_C
		else
			sudo apt-get purge linux-{headers,image}-$VER_C-generic linux-headers-$VER_C
		fi
	fi
else
	echo -e "Looks like the kernel was not installed for some reason\nI don't see it in /lib/modules"
fi
echo -e "\n\nAre you ready to Reboot? (y=Yes, n=No) (n)"
if [ $auto -eq 0 ];then
	read action
else
	action="n"
fi
if [ "$action" == "y" ];then
	sudo reboot
fi
exit
